from webidl`@core` import Object, Boolean

/**
 * attachmentCounter defines a counter for creating unique attachment names.
 */
var attachmentCounter int = 0

/**
 * Attachment defines a helper class for attaching an arbitrary value to another
 * value. For example, the component library uses it for book-keeping by attaching
 * DOM nodes to their components and components to their DOM nodes.
 */
class Attachment<T> {
	/**
	 * propName is the unique property name for the attachment.
	 */
	var propName string

	/**
	 * Global creates an attachment with the given global ID. Two attachments with
	 * the same global ID will return the same value.
	 */
	constructor Global(globalId string) {
		return Attachment<T>{propName: `@@${globalId}`}
	}

	/**
	 * Unique creates a new attachment with a unique name, using the prefix
	 * to make debugging easier. An attachment created with Unique will never
	 * find a value from another attachment.
	 */
	constructor Unique(prefix string) {
		attachmentCounter = attachmentCounter + 1

		return Attachment<T>{propName: `@@${prefix}-${attachmentCounter}`}
	}

	operator Index(instance any) T? {
		return this.Get(instance)
	}

	operator SetIndex(instance any, value T?) {
		this.Set(instance, value)
	}

	/**
	 * Get returns the attachment's value on the given instance, if any. If the instance
	 * is null, null is returned.
	 */
	function Get(instance any) T? {
		if instance is null { return null }

		propName := this.propName
		found := (instance.(Object))[&propName]
		if found is null { return null }

		return found.(T?)
	}

	/**
	 * Set sets the value on the given instance. If the instance is null, does nothing.
	 */
	function Set(instance any, value T?) {
		if instance is null { return }

		propName := this.propName
		obj := instance.(Object)
		if !bool(obj.hasOwnProperty(propName)) {
			Object.defineProperty(obj, &propName, Object([]{Boolean}{
				'writable': &true,
				'configurable': &false,
				'enumerable': &false,
			}))
		}

		obj[&propName] = value
	}
}
